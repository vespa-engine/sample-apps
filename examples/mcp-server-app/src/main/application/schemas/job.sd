schema job inherits candidate_matching{
    document job inherits candidate_matching {
        field job_id type string {
            indexing: summary | attribute
        }

        field title type string {
            indexing: summary | index
            index: enable-bm25
        }

        field company type string {
            indexing: summary | attribute
            attribute: fast-search

        }

        field location type string {
            indexing: summary | attribute
            attribute: fast-search
        }

        field description type string {
            indexing: summary | index
            index: enable-bm25
        }

        field salary_min type int {
            indexing: summary | attribute
        }

        field salary_max type int {
            indexing: summary | attribute
        }

        field posted_date type long {
            indexing: summary | attribute
        }
    }

    fieldset default {
        fields: title, description
    }
        
    rank-profile job_candidate_match inherits default {
    inputs {
        query(candidate_skills) tensor<float>(skill{})
        query(candidate_location) string
        query(candidate_desired_salary) double
        query(candidate_remote_ok) double
    }
    
    function skill_overlap() {
        expression: sum(attribute(skills) * query(candidate_skills))
    }
    
    function location_match() {
        expression: if(attribute(location) == query(candidate_location), 1, if(attribute(remote_ok) && query(candidate_remote_ok), 0.5, 0))
    }
    
    
    first-phase {
        expression: 20 * skill_overlap() + 25 * location_match()
    }
    }
}