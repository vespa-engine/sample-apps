schema job {
    document job {
        field job_id type string {
            indexing: summary | attribute
        }

        field title type string {
            indexing: summary | index
            index: enable-bm25
        }

        field company type string {
            indexing: summary | attribute
            attribute: fast-search

        }

        field location type string {
            indexing: summary | attribute
            attribute: fast-search
        }

        field description type string {
            indexing: summary | index
            index: enable-bm25
        }

        field skills type tensor<float>() {
            indexing: summary | attribute
            attribute: fast-search
        }

        field salary_min type int {
            indexing: summary | attribute
        }

        field salary_max type int {
            indexing: summary | attribute
        }

        field remote_ok type bool {
            indexing: summary | attribute
            attribute: fast-search
        }

        field posted_date type long {
            indexing: summary | attribute
        }
    }

    fieldset default {
        fields: title, description
    }
        
    rank-profile job_candidate_match inherits default {
    inputs {
        query(candidate_skills) tensor<float>(skill{})
        query(candidate_location) string
        query(candidate_desired_salary) int
        query(candidate_remote_ok) bool
    }
    
    function skill_overlap() {
        expression: dotProduct(attribute(skills), query(candidate_skills))
    }
    
    function location_match() {
        expression: if(attribute(location) == query(candidate_location), 100, if(attribute(remote_ok) && query(candidate_remote_ok), 50, 0))
    }
    
    function salary_match() {
        expression {
            if(query(candidate_desired_salary) >= attribute(salary_min) && 
               query(candidate_desired_salary) <= attribute(salary_max), 100,
               if(query(candidate_desired_salary) < attribute(salary_min),
                  max(0, 100 - (attribute(salary_min) - query(candidate_desired_salary)) / 1000),
                  max(0, 100 - (query(candidate_desired_salary) - attribute(salary_max)) / 1000)
               )
            )
        }
    }
    
    first-phase {
        expression: skill_overlap() + location_match()
    }
    }
}