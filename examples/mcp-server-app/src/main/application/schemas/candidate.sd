schema candidate inherits candidate_matching{
    document candidate inherits candidate_matching {
        field candidate_id type string {
            indexing: summary | attribute
        }

        field name type string {
            indexing: summary | index
            index: enable-bm25
        }

        field candidate_summary type string {
            indexing: summary | index
            index: enable-bm25
        }

        field experience_years type int {
            indexing: summary | attribute
        }

        field location type string {
            indexing: summary | attribute
            attribute: fast-search
        }

        field desired_salary type int {
            indexing: summary | attribute
        }
    }
    fieldset default {
        fields: name, candidate_summary
    }

    rank-profile candidate_job_match inherits default {
        inputs {
            query(job_skills) tensor<float>(skill{})
            query(job_location) string
            query(job_remote_ok) double
        }

        function skill_overlap() {
            expression: sum(attribute(skills) * query(job_skills))
        }

        function location_match() {
            expression: if(attribute(location) == query(job_location), 100, if(attribute(remote_ok) && query(job_remote_ok), 50, 0))
        }

        first-phase {
            expression: skill_overlap() + location_match()
        }
    }
}