# Copyright Yahoo. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

schema item {

    document item {

        field asin type string {
            indexing: summary | attribute
        }

        field timestamp type long {
            indexing: summary | attribute
        }

        field brand type string {
            indexing: summary | attribute
            rank: filter
            attribute: fast-search
        }

        field title type string {
            indexing: summary | index
        }

        field description type string {
            indexing: summary | index
        }

        field price type float {
            indexing: summary | attribute
        }

        field categories type array<string> {
            indexing: summary | attribute
            rank:filter
            attribute: fast-search
        }

        field categories_text type string {
            indexing: index
        }

        field images type array<string> {
            indexing: summary | attribute
        }

        field related type array<string> {
            indexing: summary
        }

        field rating_stars type int {
            indexing: summary | attribute
        }

        field rating_count type int {
            indexing: summary | attribute
        }

    }

    field brand_text type string {
        indexing: input brand | index
    }

    document-summary short {
        from-disk
        summary asin type string { source: asin }
        summary title type string { source: title }
        summary price type float { source: price }
        summary brand type string { source: brand }
        summary categories type array<string> { source: categories }
        summary images type array<string> { source: images }
        summary rating_stars type int { source: rating_stars }
        summary rating_count type int { source: rating_count }
    }

    fieldset default {
        fields: title, description, categories_text, brand_text
    }

    field embedding type tensor<float>(x[384]) {
        indexing: input title | embed | attribute | index
        attribute {
            distance-metric: angular
        }
    }

    rank-profile default {
       inputs {
            query(query_embedding) tensor<float>(x[384])
       }
    }

    rank-profile item inherits default {

        function inline average_rating() {
            expression: if(attribute(rating_count) > 0, attribute(rating_stars) / attribute(rating_count), 0)
        }

        function rating() {
            expression: if(attribute(rating_count) > 5, average_rating / 5, 0)
        }

        function keyword() {
            expression {
                (nativeRank(categories) + nativeRank(categories_text) + 2*nativeRank(title) + nativeRank(description) +
                nativeRank(brand_text))/6
            }
        }

        function semantic() {
            expression: cos(distance(field,embedding))
        }

        function default_ranking() {
            expression {
                0.6*keyword + 0.3*semantic + 0.05*rating
             }
        }

        function within_rating_limits() {
            expression: if ( average_rating > query(min_rating) && (average_rating < query(max_rating)), 1, 0)
        }

        function rating_filter(val) {
            expression {
                if (query(use_rating_filter) == 1,
                    if(within_rating_limits == 1, val, -200.0), val)
            }
        }

        function inline apply_ranking_filters(val) {
            expression: rating_filter(val)
        }

        first-phase {
            expression {
                if(apply_ranking_filters(default_ranking) > -200, if(keyword < 0.005 && semantic < 0.45 && semantic > -0.95, -200, apply_ranking_filters(default_ranking)), apply_ranking_filters(default_ranking))
            }
            rank-score-drop-limit: -100.0
        }

        match-features {
            rating
            semantic
            distance(field, embedding)
            keyword
            query(min_rating)
            query(max_rating)
            average_rating
            within_rating_limits
            nativeRank(categories)
            nativeRank(categories_text)
            nativeRank(brand_text)
            nativeRank(title)
            nativeRank(description)
        }

    }

    rank-profile promoted inherits item {
        first-phase {
            expression: (average_rating / 5) + random
        }
    }

    rank-profile sort_by_price inherits item {
        function inline default_ranking() {
            expression: query(sort_direction) * attribute(price)
        }
    }

    rank-profile sort_by_rating inherits item {
        function inline default_ranking() {
            expression: query(sort_direction) * average_rating
        }
    }

}
