# Copyright Vespa.ai. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

schema wiki {

  document wiki {

    field id type int {
      indexing: attribute | summary
    }

    field title type string {
      indexing: index | summary
      index: enable-bm25
    }

    field url type string {
      indexing: index | summary
      index: enable-bm25
    }

    field paragraphs type array<string> {
      indexing: index | summary
      index: enable-bm25 # bm25 computed over all elements (bag of words)
      bolding: on 
    }
  }

  field paragraph_embeddings type tensor<float>(p{},x[384]) {
    indexing {
      input paragraphs |
        for_each {
         (input title || "") . " " . ( _ || "")
        } | embed e5 | attribute | index # Index keyword enables HNSW index
    }
    attribute {
      distance-metric: angular #match the E5 embedding model distance metric
    }
  }

  fieldset default {
    fields: title, url, paragraphs 
  }

  rank-profile semantic inherits default {
    inputs {
      query(q) tensor<float>(x[384])
    }
    first-phase {
      expression: cos(distance(field,paragraph_embeddings))
    }
    match-features {
      closest(paragraph_embeddings)
    }
  }

  rank-profile bm25 {
    first-phase {
      expression: 2*bm25(title) + bm25(paragraphs) 
    }
  }

  rank-profile hybrid inherits semantic {

    function all_paragraph_similarities() {
      expression {
        cosine_similarity(query(q),attribute(paragraph_embeddings), x)
      }
    }

    function avg_paragraph_similarities() {
      expression {
        reduce(cosine_similarity(query(q),attribute(paragraph_embeddings), x), avg, p)
      }
    }
    function keywords() {
      expression: bm25(title) + bm25(paragraphs) + bm25(url)
    }
    function log_bm25() {
      expression: if(keywords > 0, log(keywords), 0)
    }

    first-phase {
      expression: cos(distance(field,paragraph_embeddings)) 
    }
    second-phase {
      expression {
        firstPhase + log_bm25 + 10*cos(distance(field,paragraph_embeddings))
      }
    }

    match-features {
      firstPhase
      closest(paragraph_embeddings)
      bm25(title)
      bm25(paragraphs)
      bm25(url)
      log_bm25
      avg_paragraph_similarities
      all_paragraph_similarities
    }
  }

  document-summary minimal {
    summary id {}
    summary title {}
  }
}
