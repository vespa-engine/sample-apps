# Copyright Vespa.ai. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

# A description of a type of data, how to store and index it, and what to compute over the data elements
#
# See:
#  - https://docs.vespa.ai/en/schemas.html
schema music {

    document music {

        field artist type string {
            indexing: summary | index
        }

        field album type string {
            indexing: summary | index
            index: enable-bm25
        }

        field year type int {
            indexing: summary | attribute
        }

        field category_scores type tensor<float>(cat{}) {
            indexing: summary | attribute
        }

    }

    fieldset default {
        fields: artist, album
    }

    # Rank profiles defines what to compute over the data, and how to use the computation result to order them
    # They can be selected at query time (ranking.profile=[name]), and can be everything from simple handwritten
    # expressions as below to references to large machine-learned models.
    #
    # See
    #  - https://docs.vespa.ai/en/ranking.html
    rank-profile rank_albums inherits default {
        inputs {
            query(user_profile) tensor<float>(cat{})
        }
        first-phase {
            expression: bm25(album) + 0.25 * sum(query(user_profile) * attribute(category_scores))
        }
    }

}
